c
@month
@year
@time_range_report
c
to_date.day == to_date.end_of_month.day
from_date.day == from_date.beginning_of_year.day
check
c
@month
@year
@time_range_report
c
self.movements_path_by_month(year.to_i - 1, 1)
month.nil?
month
year
c
movements_list_links
c
@time_range_report
c
@time_range_report
c
to_date.day == to_date.end_of_month.day
from_date.day == from_date.beginning_of_month.day
from_date_month == to_date_month
check
q
params[:q][:emitted_at_gteq].split('-').
params[:q][:emitted_at_gteq].split('-')
c
date
c
q[:emitted_at_lteq].split('-')[2].to_i
q[:emitted_at_lteq].split('-')[1].to_i
q[:emitted_at_lteq].split('-')[0].to_i
q[:emitted_at_gteq].split('-')[2].to_i
q[:emitted_at_gteq].split('-')[1].to_i
q[:emitted_at_gteq].split('-')[0].to_i
c
q[:emitted_at_lteq]
q[:emitted_at_gteq]
c
params
q[:emitted_at_lteq]
c
q[:emitted_at_gteq].split('-')[0]
c
q[:emitted_at_gteq].split('-')[0]
q[:emitted_at_gteq]
c
q[:emitted_at_gteq]
Date.new(q[:emitted_at_gteq])
q[:emitted_at_gteq]
c
year
c
month
year
c
params[:q]
c
italian_months_for_select
c
@search.year_eq
@search.month_eq
@search
c
params[:q]
params
c
@movements_global_amount_by_expense_items_and_month[expense_item]
@movements_global_amount_by_expense_items_and_month[expense_item].delete('total')
@movements_global_amount_by_expense_items_and_month
@movements_global_amount_by_expense_items_and_month[expense_item].delete('total')
@movements_global_amount_by_expense_items_and_month[expense_item]
c
@movements_max_amount
c
@movements_global_amount_by_expense_items_and_month.sort_by{ | expense_item, hash | hash['total'] }.keys
@movements_global_amount_by_expense_items_and_month
@movements_global_amount_by_expense_items_and_month.keys
c
@movements_global_amount_by_expense_items_and_month[expense_item]
@movements_global_amount_by_expense_items_and_month
@movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }
@movements_global_amount_by_expense_items_and_month
@movements_global_amount_by_expense_items_and_month[expense_item]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }[@movements_global_amount_by_expense_items_and_month.keys[-2]]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.fourth
@movements_global_amount_by_expense_items_and_month[expense_item]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
c
@movements_global_amount_by_expense_items_and_month[expense_item]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
c
@movements_global_amount_by_expense_items_and_month[expense_item]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
c
-0.0 * -1
@movements_global_amount_by_expense_items_and_month[expense_item]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
@movements_global_amount_by_expense_items_and_month[expense_item]
c
@movements_global_amount_by_expense_items_and_month[expense_item]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
c
@movements_global_amount_by_expense_items_and_month[expense_item]
expense_item = @movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
@movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }.last
@movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }
c
@movements_global_amount_by_expense_items_and_month.keys.sort_by{ | expense_item, hash | expense_item.description }
@movements_global_amount_by_expense_items_and_month.sort_by{ | expense_item, hash | expense_item.description }.keys.pluck
@movements_global_amount_by_expense_items_and_month.keys
c
causal
c
causal
c
causal
c
f
causal
c
movement_type
amount
emitted_at
expired_at
causal
q
color_hex
expense_items_by_colors
expense_item_id
expense_item_id: expense_item_id
color_hex
causal
c
causal
color_hex
q
c
color_hex
c
file_paths.filter{ | file | file.include?('xlsx')}
file_paths
c
color_hex = fill_color[2..-1]
fill_color = workbook.stylesheet.fills[fill_id].pattern_fill&.fg_color&.rgb
workbook.stylesheet.fills[fill_id].pattern_fill&.fg_color&.rgb
fill_id = cell_style&.fill_id
cell_style = workbook.stylesheet.cell_xfs[ruby_cell.style_index]
cell_style = workbook.stylesheet.cell_xfs[style_index]
style_index = ruby_cell.style_index
cell_style = workbook.stylesheet.cell_xfs[style_index]
ruby_cell.style_index
c
cell.inspect
cell.get_cell_border
cell.get_cell_xf
cell.value_container
cell.ph
cell.vm
cell.vn
cell.r
cell.get_cell_font.color
cell.get_cell_font
cell.get_cell_font.color
cell.get_cell_font.color.rgb
cell.get_cell_font.color
cell.get_cell_font
cell.methods
cell.styles
workbook.styles.cell_xfs
fill_id = style.fill_id
style = workbook.styles.cell_xfs[cell.style_index]
workbook.styles.cell_xfs[cell.style_index]
cell.style_index
cell.fill
cell = worksheet[0][0]
worksheet = workbook[0]
ruby_cell.fill
ruby_cell.value
ruby_cell
cell.worksheet
cell.get_styles
cell.styles
cell.get_cell_xf
cell.get_cell_font
cell.methods
cell.fill_color
cell = workbook[0][0][0]
ruby_cell.get_fill_color
ruby_cell
workbook.stylesheet
workbook.stylesheet.styles
workbook.stylesheet[ruby_cell.style_index]
workbook.stylesheet
c
workbook.style_sheet
c
workbook.styles
workbook.styles[ruby_cell.style_index]
ruby_cell.style_index
c
ruby_cell.style
ruby_cell
rubye_cell
worksheet.styles[ruby_cell.style_index]
ruby_cell.style_index
worksheet.sheet_data[row - 1][0]
ruby_cell
c
ruby_cell
q
workbook.styles[ruby_cell.style_index]
ruby_cell.style_index
ruby_cell.styles
ruby_cell.value
ruby_cell
causal
c
ruby_cell
fill = style&.fills&.first
style = workbook.styles[ruby_cell.style_index]
workbook.styles[ruby_cell.style_index]
ruby_cell
c
cell.is_struckthrough
cell.font_name
cell.fill_color
cell = workbook[0][0][0]
cell.fill_color
cell = worksheet.sheet_data[row - 1][5]
worksheet.sheet_data[row - 1][5]
row - 1
row
movement_type
c
worksheet[0][3]
worksheet
c
workbook[0]
workbook
c
col
row
ruby_sheet
c
movements.minimum('amount').to_f.round(2) * -1
c
C
@movements_max_amount
c
