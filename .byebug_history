c
prices
c
movements_global_amount_by_counts.keys.count
movements_global_amount_by_counts.keys
movements_global_amount_by_counts
c
month
year
c
MetalPricesParams::METAL_PRICES_URL.gsub(':metal', metal.to_s).gsub(':date', date.to_s)
metal.to_s
q
continue
q
.c
c
metal
c
metal
karat
value
c
@year.present? || @month.present?
c
@year.present? || @month.present?
c
@year.present? || @month.present?
c
@year.present? || @month.present?
c
@time_range_report
c
params
c
request
current_page
c
@organization
c
@organization
c
params.dig(:user, :password)
params.dig('password')
params.dig(:password).blank?
params.dig(:password_4)
params.dig(:password).blank?
params.dig(:password)
params
params.dig(:password)
params.dig(:password).blank?
params.dig(:password)?
c
"#{modal_id}_error_messages"
c
format
format.html
c
format.html
format
c
request
c
params
request
c
modal_id.blank?
c
!current_user.admin? && !@organization.memberships.pluck(:user_id).include?(current_user.id)
current_user.id
@organization.memberships.pluck(:user_id)
@organization.memberships.pluck(:user_id).include?(current_user.id)
@organization
c
@count
c
request.url.split('?q')[0]
request.url.split('?q')
c
request.url
c
request.url
current_page
current_page?
c
params
c
params
c
params
c
@movements_amounts_by_expense_items.to_a.map { | expense_item, amount | [expense_item.description, amount] }.to_h
@movements_amounts_by_expense_items.to_a.map { | expense_item, amount | [expense_item.description, amount] }
@movements_amounts_by_expense_items.to_a
@movements_amounts_by_expense_items.map { | expense_item, amount | expense_item.description => amount }
@movements_amounts_by_expense_items
(@movements_amounts_by_expense_items.values.min * -1.1).to_f.round(2)
(@movements_amounts_by_expense_items.values.min * 1.1).to_f.round(2)
@movements_amounts_by_expense_items.values.min
@movements_amounts_by_expense_items.values
@movements_amounts_by_expense_items.keys
@movements_global_amount_by_expense_items.keys
c
@movements_global_amount_by_expense_items[expense_item]
c
@movements_amounts_by_expense_items
@movements_global_amount_by_expense_items
c
frame_name
c
frame_name
c
frame_name
c
frame_name
c
frame_name
c
frame_name
c
frame_name
c
frame_name
c
frame_name
@page
c
"movements-container-#{page.to_i}"
c
@page
c
page
c
@page
c
page
c
params[:page]
@page
page
c
.c
c
@page
c
page
c
page
c
"movements-container-#{page.to_i + 1}"
c
frame_name
c
"movements-container-#{page.to_i + 1}"
"movements-container-<%= page.to_i + 1 %>"
c
frame_name
c
{ **params[:q]&.to_unsafe_h, 'page': page.to_i + 1 }
c
count.id
c
{ **params[:q]&.to_unsafe_h, page: page.to_i + 1 }
c
self.monitoring_scope
c
modal_id
c
params[:movement]
c
params
modal_id
c
params
c
params
c
time_ranges
@year
Movement.where(year: @year).count
movements.count
movements.where(movement_type: 'out').count
c
movements.where(movement_type: 'out').count
movements.pluck(:year).uniq
movements.count.pluck(:year).uniq
movements.count
c
params[:q]
c
params[:q].to_unsafe_h
params[:q].parametes
params[:q].values
params[:q]
c
@time_range_report
c
q.keys - %w[emitted_at_gteq emitted_at_lteq]
blank_keys?(q, q.keys - %w[emitted_at_gteq emitted_at_lteq])
q[:emitted_at_lteq].present?
q[:emitted_at_gteq].present?
q.present?
q = params[:q]
@time_range_report
c
@time_range_report
c
hash[keys.first]
keys.first
keys
c
movements = movements.where(expense_item_id: expense_item.id)
expense_item = @movements_global_amount_by_expense_items.keys.second
time_range
c
movements = movements.where(expense_item_id: expense_item.id)
expense_item = @movements_global_amount_by_expense_items.keys.second
movements = movements.where(expense_item_id: expense_item.id)
@movements_global_amount_by_expense_items.keys.second
time_range
c
@movements_global_amount_by_expense_items[expense_item]['total'] = @movements_global_amount_by_expense_items[expense_item]['total'] + global_amount_by_expense_items
@movements_global_amount_by_expense_items[expense_item][@year.present? ? italian_month(time_range) : time_range]
@movements_global_amount_by_expense_items[expense_item][@year.present? ? italian_month(time_range) : time_range] = global_amount_by_expense_items
global_amount_by_expense_items
global_amount_by_expense_items = global_amount_by_expense_items * -1 if global_amount_by_expense_items < 0
global_amount_by_expense_items = movements.sum(&:amount).to_f.round(2)
movements.sum(&:amount).to_f.round(2)
movements.count
movements = @year.present? ? movements.where(month: time_range) : movements.where(year: time_range)
time_range
movements.count
movements = movements.where(expense_item_id: expense_item.id)
expense_item = @movements_global_amount_by_expense_items.keys.second
@movements_global_amount_by_expense_items.keys.second
@movements_global_amount_by_expense_items.keys.first
@movements_global_amount_by_expense_items.values
@movements_global_amount_by_expense_items.keys
params
Movement.count
movements.count
c
@movements_global_amount_by_expense_items.values
@movements_global_amount_by_expense_items
c
@movements_global_amount_by_expense_items
c
@final_amounts_by_date
c
time_ranges
c
@year
c
time_ranges
c
@month
